<?php

/**
 * @file
 * Implements Qualpat payment services for use with Drupal Commerce.
 */


/**
 * Implements hook_menu().
 */
require ( __DIR__ .'/inc/qp_checkout.php');

function commerce_qualpay_menu() {
  $items = array();

  $items['cart/qualpay_payments/complete'] = array(
    'title' => 'Order complete using Qualpay',
    'page callback' => 'commerce_qualpay_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/qualpay_payments/order_complete'] = array(
    'title' => 'User Redirect after order complete using Qualpay',
    'page callback' => 'commerce_qualpay_order_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_qualpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['qualpay'] = array(
    'base' => 'commerce_qualpay',
    'title' => t('Credit Card via Qualpay'),
    'short_title' => t('Qualpay'),
    'description' => t('Qualpay Payments'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_qualpay_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'security_key' => '',
    'redirect_validation_hash' => empty($settings['redirect_validation_hash']) ?
      _commerce_qualpay_randomstring(16) : $settings['redirect_validation_hash'],
    'method' => 'DPM',
    'transaction_mode' => 'sandbox',
    'currency' => 'USD',
    'checkout_button' => 'Submit Order',
 
  );

  $form['security_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Security Key'),
    '#description' => t('Your Qualpay security key.'),
    '#default_value' => $settings['security_key'],
  );
  
 
  $form['transaction_mode'] = array(
    '#type' => 'select',
    '#title' => t('Transaction mode'),
    '#description' => t('Transaction mode used for processing orders.'),
    '#options' => array(
      'production' => t('Production/Live'),
      'sandbox' => t('Sandbox'),
    ),
    '#multiple' => FALSE,
    '#default_value' => $settings['transaction_mode'],
  );
  
  
 
  $form['currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Currency Code'),
    '#description' => t('Currency code for the transaction.'),
    '#default_value' => $settings['currency'],
  );
  $form['checkout_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Submit Button Text'),
    '#description' => t('Specify the text for the payment form submit button.'),
    '#default_value' => $settings['checkout_button'],
  );
  
 
  

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a SIM/DPM form.
 */
function commerce_qualpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['security_key']) ) {
    drupal_set_message(t('Qualpay security key is not configured for use. No account credentials have been specified.'), 'error');
    return array();
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  $amount = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  if (empty($currency_code)) {
    $currency_code = empty($payment_method['settings']['currency_code']) ? 'USD' :
      $payment_method['settings']['currency_code'];
  }
  #settings checkout
   $settings = new CheckoutSettings();

      if( $payment_method['settings']['transaction_mode'] == 'sandbox' ){
         $settings->credentials($payment_method['settings']['security_key'])
         ->url(CheckoutSettings::QUALPAY_TEST)
         ->timeout(5000)
         ->verbose(false);
      }else{
         $settings->credentials($payment_method['settings']['security_key'])
         ->url(CheckoutSettings::QUALPAY_PROD)
         ->timeout(5000)
         ->verbose(false);
   }
        
   
   ##
   $relay_url = check_url(url('cart/qualpay_payments/complete', array('absolute' => TRUE)));
   // Create a  Checkout resource
         $pref = new Preferences();
         $pref->setExpireInSecs(300)
              ->setAllowPartialPayments(true)
              ->setSuccessUrl($relay_url)
              ->setFailureUrl(check_url(url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE))));      

         $request = new CheckoutRequest();
         $request->setAmtTran(number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 2, '.', ''))
                 ->setPreferences($pref)
                 ->setTranCurrency("840")
                 ->setPurchaseId($order->order_id)
                 ->setCustomerFirstName($billing_address['first_name'])
                 ->setCustomerLastName($billing_address['last_name'])
                 ->setBillingAddr1(drupal_substr($billing_address['thoroughfare'], 0, 60))
                 ->setBillingCity(drupal_substr($billing_address['locality'], 0, 40))
                 ->setBillingState( drupal_substr($billing_address['administrative_area'], 0, 40))
                 ->setBillingZip(drupal_substr($billing_address['postal_code'], 0, 20));


         $checkout = new Checkout($settings);
         $response = $checkout->create($request);

         if ( $response->isSuccessful() ) {
          
            $checkoutId     = $response->getCheckoutId();
            $checkoutLink   = $response->getCheckoutLink();

          
      
         }
         else {

            drupal_set_message(t('Payment error: '. $response->getMessage()), 'error');
            return array();
         }
   ##

  //$form['#action'] = $url;
  $form['#action'] = $checkoutLink;

  

    $form['actions'] = array(
    '#type' => 'actions',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => empty($payment_method['settings']['checkout_button']) ? t('Submit Order') :
      check_plain($payment_method['settings']['checkout_button']),
  );
  
  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t('Cancel'),
    '#href' => 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'],
    '#options' => array(
      'absolute' => TRUE,
      'html' => FALSE,
    ),
  );

  return $form;
}

/**
 * Payment method callback: redirect form return validation.
 */
 
function commerce_qualpay_redirect_form_validate($order, $payment_method) {
  // Should always fail, as the payment return URL should never be visited externally.
  // Visiting it via drupal_goto() (as is done normally) doesn't trigger the function.
  return FALSE;
}

/**
 * Callback function for posted payment response.
 */
function commerce_qualpay_complete() {
  $order_id = check_plain($_POST['order_id']);
  $payment_id = check_plain($_POST['payment_id']);
  $currency_code = check_plain($_POST['currency_code']);
  $auth_type = check_plain($_POST['x_type']);
  $response_code = check_plain($_POST['x_response_code']);
  $response_subcode = check_plain($_POST['x_response_reason_code']);
  $avscode = check_plain($_POST['x_avs_code']);
  $response_reason_text = check_plain($_POST['x_response_reason_text']);
  watchdog('commerce_qualpay', 'Receiving payment response for order !order_id from Server', array('!order_id' => $order_id));

  // Validate the response
  $order = commerce_order_load($order_id);
  $payment_method = commerce_payment_method_instance_load($payment_id);
  if ($payment_method) {
    $qualpay_md5_hash = $payment_method['settings']['md5_hash'];
    $auth_trans_id = check_plain($_POST['x_trans_id']);
    $amount = check_plain($_POST['x_amount']);
    $auth_successful = TRUE;
    if ($qualpay_md5_hash != '') {
      $auth_md5_hash = check_plain($_POST['x_MD5_Hash']);
      $qualpay_security_key = $payment_method['settings']['security_key'];
      $fingerprint = md5($qualpay_md5_hash . $qualpay_security_key . $auth_trans_id . $amount);
      if (drupal_strtolower($fingerprint) != drupal_strtolower($auth_md5_hash)) {
        $auth_successful = FALSE;
      }
    }
  }
  else {
    $auth_successful = FALSE;
  }

  // Handle response, if valid.

  if (!$auth_successful || !$order) { // invalid response
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    watchdog('commerce_qualpay', 'An unauthenticated response from server made it to checkout! Calculated MD5: !CMD5 Received MD5: !RMD5', array('!CMD5' => $fingerprint, '!RMD5' => $auth_md5_hash), WATCHDOG_ERROR);
  }
  else { // valid response

    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $quantity = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());

    if ($quantity > 0) {

      // Prepare a transaction object to log the API response.
      $transaction = commerce_payment_transaction_new('qualpay', $order->order_id);
      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->remote_id = $auth_trans_id;
      $transaction->remote_status = $auth_type;
      $transaction->amount = commerce_currency_decimal_to_amount($amount, $currency_code);
      $transaction->currency_code = $currency_code;
      $transaction->payload[REQUEST_TIME] = $_POST;

      if ($response_code == '1') { // order APPROVED (1)
        $gateway_method = $payment_method['settings']['method'];

        $order_status = commerce_order_status_load($order->status);
        if ($order_status['state'] == 'checkout' && $order_status['checkout_page'] == 'review') {
          $message = t("Order status reset due to a back button payment re-submission. Order ID: !order_id", array("!order_id" => $order->order_id));
          $order = commerce_order_status_update($order, 'checkout_payment', FALSE, NULL, $message);
          watchdog("commerce_qualpay", $message);
        }

        if (strcasecmp($auth_type, 'AUTH_ONLY') == 0) { // authorization only
          $message = t('Authorized by !type !card !cardnum, !method order with auth code: !auth_code. (subcode: !subcode, avscode: !avscode) !reason_text',
            array(
              '!type' => 'credit card',
              '!card' => check_plain($_POST['x_card_type']),
              '!cardnum' => check_plain($_POST['x_account_number']),
              '!method' => $gateway_method,
              '!auth_code' => check_plain($_POST['x_auth_code']),
              '!subcode' => $response_subcode,
              '!avscode' => $avscode,
              '!reason_text' => $response_reason_text,
            ));
          $transaction->message = $message;
          $message = '';
          $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
          commerce_payment_transaction_save($transaction);
          commerce_payment_redirect_pane_next_page($order);
        }
        else { // authorization and capture
          $order_total = $wrapper->commerce_order_total->value();
          $order_amount = commerce_currency_amount_to_decimal($order_total['amount'], $order_total['currency_code']);
          if (abs($amount - $order_amount) < 0.01) { // full payment
            $message = t('Paid by !type !card !cardnum, server !method order with auth code: !auth_code (subcode: !subcode, avscode: !avscode).  !reason_text',
              array(
                '!type' => 'credit card',
                '!card' => check_plain($_POST['x_card_type']),
                '!cardnum' => check_plain($_POST['x_account_number']),
                '!method' => $gateway_method,
                '!auth_code' => check_plain($_POST['x_auth_code']),
                '!subcode' => $response_subcode,
                '!avscode' => $avscode,
                '!reason_text' => $response_reason_text,
              ));
            $transaction->message = $message;
            $message = '';
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            commerce_payment_transaction_save($transaction);
            commerce_payment_redirect_pane_next_page($order);
          }
          else { // partial or incorrect payment
            $message = t('Your transaction was approved but for a different amount. Please contact us to resolve this situation.');
            $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $transaction->message = t('There was a problem with your order: Transaction was approved for a different amount (billed amount !billed_amount, approved amount !approved_amount) !response_code : (subcode: !subcode, avscode: !avscode) !reason_text',
              array(
                '!response_code' => $response_code,
                '!subcode' => $response_subcode,
                '!avscode' => $avscode,
                '!reason_text' => $response_reason_text,
                '!billed_amount' => $order_amount,
                '!approved_amount' => $amount,
              ));
            commerce_payment_transaction_save($transaction);
            commerce_payment_redirect_pane_previous_page($order);
          }
        }
      }
      else { // order DECLINED (2), order ERROR (3), order HELD for REVIEW (4)
        $message = t('The transaction was declined by the credit card company. Reason provided: !reason_text', array('!reason_text' => $response_reason_text));
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('There was a problem with your order: !response_code : (subcode: !subcode, avscode: !avscode) !reason_text',
          array(
            '!response_code' => check_plain($response_code),
            '!subcode' => $response_subcode,
            '!avscode' => $avscode,
            '!reason_text' => $response_reason_text,
          ));
        commerce_payment_transaction_save($transaction);
        commerce_payment_redirect_pane_previous_page($order);
      }
    }
    else { // order is invalid or empty, or might be a duplicate SIM response
      watchdog('commerce_qualpay', 'An invalid or empty order made it to checkout.  Order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
    }
  }

  // Build an HTML snippet that will be returned to server and requested
  // back.

  $qualpay_redirect_validation_hash = $payment_method['settings']['redirect_validation_hash'];
  $redirect_fingerprint = md5($qualpay_redirect_validation_hash . $order_id . $payment_id . $auth_type . $message );

  $args = array(
    REDIRECT_ARG_HASH => $redirect_fingerprint,
    REDIRECT_ARG_ORDER_ID => $order_id,
    REDIRECT_ARG_PAY_ID => $payment_id,
    REDIRECT_ARG_PAY_TYPE => $auth_type,
    REDIRECT_ARG_MESSAGE => $message,
  );
  $redirect_url = url('cart/qualpay/order_complete', array('absolute' => TRUE, 'query' => $args));

  $output  = "<html><head><title>Processing Payment</title><script language=\"javascript\">\n";
  $output .= "<!--\n";
  $output .= "window.location.href=\"{$redirect_url}\"\n";
  $output .= "//-->\n";
  $output .= "</script></head><body>\n";
  $output .= "<noscript><meta http-equiv=\"refresh\" content=\"1;url={$redirect_url}\"></noscript>\n";
  $output .= '<p style="text-align: center">Processing your payment; please wait...</p>';
  $output .= "<p style=\"text-align: center\"><a href=\"{$redirect_url}\">Please click here if you are not automatically redirected to the next step.</a></p></body></html>";

  // Return it as a post response and exit.

  print $output;
  exit();
}

/**
 * Callback function fetching the HTML snippet returned
 * for the payment response post.
 */
function commerce_qualpay_order_complete() {
  $order_id = $_GET[REDIRECT_ARG_ORDER_ID];
  $payment_id = $_GET[REDIRECT_ARG_PAY_ID];
  $message = check_plain($_GET[REDIRECT_ARG_MESSAGE]);
  $auth_type = $_GET[REDIRECT_ARG_PAY_TYPE];
  watchdog('commerce_qualpay', 'Receiving redirect response for order !order_id from server', array('!order_id' => $order_id));

  // Validate posted data.

  $payment_method = commerce_payment_method_instance_load($payment_id);
  $auth_successful = FALSE;
  if ($payment_method) {
    $qualpay_redirect_validation_hash = $payment_method['settings']['redirect_validation_hash'];
    $auth_redirect_hash = $_GET[REDIRECT_ARG_HASH];
    $fpredirect = md5($qualpay_redirect_validation_hash . $order_id . $payment_id . $auth_type . $message);
    $auth_successful = (drupal_strtolower($fpredirect) == drupal_strtolower($auth_redirect_hash));
  }

  if ($auth_successful) { // validated
    if ($order = commerce_order_load($order_id)) { // order appears valid
      if (!empty($message)) {
        drupal_set_message($message, 'error');
      }
      drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);
    }
    else { // order appears invalid
      watchdog('commerce_qualpay', 'An invalid order made it to checkout! Order ID: @cart_order', array('@cart_order' => $order_id), WATCHDOG_ERROR);
      $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    }
  }
  else { // invalid data
    watchdog('commerce_qualpay', 'An unauthenticated response from user after redirection from server made it to checkout! Calculated redirect hash: !RCMD5  Received redirect hash: !RRMD5  Order ID: @cart_order', array('!RCMD5' => $fpredirect, '!RRMD5' => $auth_redirect_hash, '@cart_order' => $order_id), WATCHDOG_ERROR);
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
  }

  // Payment failed; return to checkout.

  drupal_set_message($message, 'error');
  drupal_goto('cart');
}

/**
 * Generate a random string (from DrupalTestCase::randomString).
 */
function _commerce_qualpay_randomstring($length = 8) {
  $str = '';

  for ($i = 0; $i < $length; $i++) {
    $str .= chr(mt_rand(32, 126));
  }

  return $str;
}
